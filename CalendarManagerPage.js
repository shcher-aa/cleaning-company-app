import React, { useState } from 'react';
import Calendar from 'react-calendar';
import 'react-calendar/dist/Calendar.css';
import { format } from 'date-fns';
import { getDatabase, ref, onValue } from 'firebase/database';

const holidayMap = {
  '2025-01-01': '–ù–æ–≤—ã–π –≥–æ–¥',
  '2025-04-17': '–°—Ç—Ä–∞—Å—Ç–Ω–æ–π —á–µ—Ç–≤–µ—Ä–≥',
  '2025-04-18': '–°—Ç—Ä–∞—Å—Ç–Ω–∞—è –ø—è—Ç–Ω–∏—Ü–∞',
  '2025-04-21': '–ü–∞—Å—Ö–∞–ª—å–Ω—ã–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫',
  '2025-05-01': '–ü—Ä–∞–∑–¥–Ω–∏–∫ —Ç—Ä—É–¥–∞',
  '2025-05-17': '–î–µ–Ω—å –ö–æ–Ω—Å—Ç–∏—Ç—É—Ü–∏–∏ –ù–æ—Ä–≤–µ–≥–∏–∏',
  '2025-05-29': '–í–æ–∑–Ω–µ—Å–µ–Ω–∏–µ',
  '2025-06-09': '–¢—Ä–æ–∏—Ü–∞',
  '2025-12-25': '–†–æ–∂–¥–µ—Å—Ç–≤–æ',
  '2025-12-26': '–í—Ç–æ—Ä–æ–π –¥–µ–Ω—å –†–æ–∂–¥–µ—Å—Ç–≤–∞'
};

function CalendarManagerPage() {
  const [selectedDate, setSelectedDate] = useState(new Date());
  const [dayClients, setDayClients] = useState([]);
  const [selectedStaff, setSelectedStaff] = useState('–í—Å–µ');

  const handleEdit = (client) => {
    // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    alert(`–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–∞: ${client.name}`);
  };

  const handleDelete = (client) => {
    const confirmed = window.confirm(`–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞: ${client.name}?`);
    if (confirmed) {
      const db = getDatabase();
      const dateKey = format(selectedDate, 'yyyy-MM-dd');
      const dateRef = ref(db, `calendar/${dateKey}`);

      onValue(dateRef, (snapshot) => {
        const data = snapshot.val();
        if (data) {
          const updatedData = Object.fromEntries(
            Object.entries(data).filter(([_, value]) => value.name !== client.name)
          );
          ref(db, `calendar/${dateKey}`).set(updatedData);
        }
      });
    }
  };

  const handleDateChange = (date) => {
    setSelectedDate(date);
    const db = getDatabase();
    const formatted = format(date, 'yyyy-MM-dd');
    const dateRef = ref(db, `calendar/${formatted}`);

    onValue(dateRef, (snapshot) => {
      const data = snapshot.val();
      if (data) {
        const clientList = Object.values(data);
        setDayClients(clientList);
      } else {
        setDayClients([]);
      }
    });
  };

  const tileClassName = ({ date, view }) => {
    if (view === 'month') {
      const formattedDate = format(date, 'yyyy-MM-dd');
      const isWeekend = date.getDay() === 0 || date.getDay() === 6;
      const isHoliday = holidayMap[formattedDate];

      if (isHoliday) return 'holiday';
      if (isWeekend) return 'weekend';
    }
    return null;
  };

  const holidayName = holidayMap[format(selectedDate, 'yyyy-MM-dd')];

  return (
    <div>
      <h2>–ö–∞–ª–µ–Ω–¥–∞—Ä—å</h2>
      <Calendar
        onChange={handleDateChange}
        value={selectedDate}
        tileClassName={tileClassName}
        locale="ru-RU"
      />
      <p>–í—ã–±—Ä–∞–Ω–Ω–∞—è –¥–∞—Ç–∞: {selectedDate.toLocaleDateString('ru-RU')}</p>
      {holidayName && <p>–ü—Ä–∞–∑–¥–Ω–∏–∫: {holidayName}</p>}
      {dayClients.length > 0 && (
        <div>
          <h3>–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É–±–æ—Ä–∫–∏:</h3>
          <div>
            <label>–§–∏–ª—å—Ç—Ä –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É: </label>
            <select value={selectedStaff} onChange={(e) => setSelectedStaff(e.target.value)}>
              <option value="–í—Å–µ">–í—Å–µ</option>
              {Array.from(new Set(dayClients.flatMap(c => c.staff || []))).map((staffName, idx) => (
                <option key={idx} value={staffName}>{staffName}</option>
              ))}
            </select>
          </div>
          <ul>
            {dayClients
              .filter(client => selectedStaff === '–í—Å–µ' || (client.staff || []).includes(selectedStaff))
              .map((client, index) => (
                <li key={index}>
                  <strong>{client.name}</strong><br />
                  –ê–¥—Ä–µ—Å: {client.address}<br />
                  –¢–∏–ø —É–±–æ—Ä–∫–∏: {client.service}<br />
                  –í—Ä–µ–º—è: {client.time}<br />
                  –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏: {client.staff?.join(', ') || '‚Äî'}<br />
                  <button onClick={() => handleEdit(client)}>‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å</button>
                  <button onClick={() => handleDelete(client)}>üóëÔ∏è –£–¥–∞–ª–∏—Ç—å</button>
                </li>
              ))}
          </ul>
        </div>
      )}
    </div>
  );
}

export default CalendarManagerPage;

/* Add the following CSS classes to your global CSS file (e.g., index.css or App.css):

.holiday {
  background-color: #ffdddd !important;
  color: #b30000 !important;
  font-weight: bold;
}

.weekend {
  background-color: #f0f8ff !important;
  color: #003366 !important;
}

*/
